=> How does 'virtual' work?

1. VTables
    -> Formed for every class having at least one virtual function and for its derived classes.
    -> It is static arrays, hence one instance for a class.
    -> VPtr (a hidden member pointer) is added by compiler to classes with virtual and its derived classes.
    -> Depending upon the object type VPtr is bonded to a VTable.
2. VTables are created at compile time.
3. When object of a particular type is created at runtime, there will be a VPtr whi initialised to point to a static VTable at the time of construction.



=> Can we make virtual constructor?
1. NO.
2. -> Constructor cannot be virtual, because when constructor of a class is executed there is no virtual table in the memory, means no virtual pointer defined yet. 
   -> So, the constructor should always be non-virtual.
3. -> A virtual call is a mechanism to get work done given partial information. 
   -> In particular, "virtual" allows us to call a function knowing only any interfaces and not the exact type of the object.
   -> To create an object you need complete information. 
   -> In particular, you need to know the exact type of what you want to create. 
   -> Consequently, a "call to a constructor" cannot be virtual.


=> Can we make virtual destructor ?
1. YES.
2. It is really important to handle proper destruction of Derived classes.
3. Always make base class' destructor virtual if there is a child class of it.